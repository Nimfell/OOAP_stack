Задание 4.
Приведите пример иерархии классов (словесное описание), где применяется принцип Открыт-Закрыт, и обоснуйте, почему одни классы (модули) выбраны открытыми, а другие закрытыми.

Нашла ну просто бомбезную статью! Вроде бы даже по данной теме:
https://habr.com/ru/company/tinkoff/blog/472186/

Из неё:
Модули, отвечающие принципу открытости-закрытости, имеют два главных признака:
1.	Открыты для расширения. Это означает, что поведение модуля может быть расширено. То есть мы можем добавить модулю новое поведение в соответствии с изменившимися требованиями к приложению или для удовлетворения нужд новых приложений.
2.	Закрыты для изменений. Исходный код такого модуля неприкасаем. Никто не вправе вносить в него изменения.
После прочтения статьи меня посетили такие мысли, что обдумывать структуру проекта и выстраивать иерархию классов можно только исходя из проекта, его задач и его предполагаемой сложности. 
(Типа как Ваши слова, что проект на 100 строк, на 3 тысячи или на 10 тысяч строк – пишется принципиально по-разному).
Так как требования могут изменяться, то всё равно может возникнуть такой случай, что придется переписать половину кода, но это только если мы заранее не продумали, что требования могут измениться и что придется впоследствии дополнять проект (или модуль) новым функционалом.
Если правильно оценить изначально поставленную задачу и учесть грядущие изменения в новом модуле(классе), то можно внедрить принцип ОС и намутить всех этих абстракций и интерфейсов, что бы большая часть была закрытой и не подлежала изменениям при расширении данного модуля. НО! Всего учесть нереально и не нужно, а так как времени каждый учет уйдет прилично и к тому же как правильно сказано в статье полной закрытости в программе не достичь. Хотя у меня это ещё не вполне укладывается в голове.

Ну… такой пример из моей работы.
Например, есть управляющая панель с кнопками и тумблерами. И есть другая панель, почти такая же (функционал к примеру тот же), но с другими тумблерами по конструкции и с другими кнопками. И при повторном использовании кода со старой панели для новой панели нужно расширить классы (модули) для работы с другими тумблерами и кнопками.  Если класс (модуль) работы с кнопками написан в «макаронном» стиле, то соответственно тут нет возможности его расширить не прибегая к его изменению, а если предусмотренно переключение на другой вид кнопок с помощью абстракции, как указано в статье, но можно отдельно написать 
класс-наследник  Новый_Тумблер : база «Тумблер»
и дать на него ссылку. В итоге сам модуль закрыт, но мы может к нему подключать любые новые кнопки, не меняя его внутреннюю организацию.

Задание 5.
Какие из пяти принципов повторного использования модуля поддерживаются в используемом вами языке программирования (в дополнение к классам как базовой синтаксической единице)?

1ый, 
2ой, 
3ий, 
4ый(но везде указано, что это нежелательно).
5ый… эм… Вообще не понимаю что бы это могло значит и как может быть реализовано.

Задание 6.
Существуют ли ситуации, когда связи между модулями должны делаться публичными? 

Нет. Думаю, что связи можно делать закрытыми и менять их по функционалу самих модулей, тогда сами связи останутся приватными.

Какие метрики вы бы предложили для количественной оценки принципов организации модулей? Если вы разрабатывали программы, в которых было хотя бы 3-5 классов, как бы вы оценили их модульность по этим метрикам?

Ну… Может быть наличие повторяющегося кода и функционала реализованного в разных частях проекта, может говорить о его непродуманности. Насчет количественной оценки… Процентное соотношение только если)).


